version = (1, 4, 0)

import bpy
import bmesh


class MESH_OT_armored_delete_mirrored(bpy.types.Operator):
	'''Deletes superfluous geometry that's already being generated by the mirror modifier.

	armoredColony.com '''

	bl_idname = 'mesh.armored_delete_mirrored'
	bl_label = 'ARMORED Delete Mirrored'
	bl_options = {'REGISTER', 'UNDO'}

	threshold: bpy.props.FloatProperty(name='Threshold', 
		default=0.0001, min=0.0001, soft_max=1, step=0.1, precision=4)

	@classmethod
	def poll(cls, context):
		return context.active_object is not None and context.mode in {'OBJECT', 'EDIT_MESH'} 

	def execute(self, context):
		if context.mode == 'OBJECT':
			selected_objects = [obj for obj  in context.selected_objects if obj.type == 'MESH']

		elif context.mode == 'EDIT_MESH':
			selected_objects = context.objects_in_mode

		for obj in selected_objects:
			mod = obj.modifiers.get('Mirror')

			objects_without_mirror = []
			if mod is None:
				objects_without_mirror.append(obj)
				continue

			if context.mode == 'OBJECT':
				mesh = obj.data
				bm = bmesh.new()
				bm.from_mesh(mesh)

			elif context.mode == 'EDIT_MESH':
				mesh = obj.data
				bm = bmesh.from_edit_mesh(mesh)

			use_axis = mod.use_axis
			use_flip = mod.use_bisect_flip_axis

			verts_to_delete = set()

			for i, (axis, flip) in enumerate(zip(use_axis, use_flip)):
				if not axis:
					continue

				if flip:
					verts_to_delete.update(
						{v for v in bm.verts 
							if (v.co)[i] > + self.threshold}
					)

				else:
					verts_to_delete.update(
						{v for v in bm.verts 
							if (v.co)[i] < - self.threshold}
					)

			for v in verts_to_delete:
				bm.verts.remove(v)

			bm.select_flush_mode()

			if context.mode == 'OBJECT':
				bm.to_mesh(mesh)

			elif context.mode == 'EDIT_MESH':
				bmesh.update_edit_mesh(mesh)
		
		if objects_without_mirror:
			self.report({'INFO'}, 'Some objects have no mirror modifier to reference.')
			for obj in objects_without_mirror:
				print(f'{obj.name} has no Mirror Modifier to reference')

		return {'FINISHED'} 


classes = (
	MESH_OT_armored_delete_mirrored,
)

def register():
	for cls in classes:
		bpy.utils.register_class(cls)
		

def unregister():
	for cls in classes:
		bpy.utils.unregister_class(cls)