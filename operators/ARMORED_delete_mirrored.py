# v1.1

import bpy
import bmesh


class MESH_OT_armored_delete_mirrored(bpy.types.Operator):
	'''Deletes unnecessary geometry that's already being generated by the mirror modifier.

armoredColony.com '''

	bl_idname = 'mesh.armored_delete_mirrored'
	bl_label = 'ARMORED Delete Mirrored'
	bl_options = {'REGISTER', 'UNDO'}

	margin: bpy.props.FloatProperty(name='Margin', 
		default=0.001, min=0.0001, soft_max=1, step=0.1, precision=4)

	@classmethod
	def poll(cls, context):
		active = context.active_object
		return (
			active is not None and 
			active.type == 'MESH' and
			context.mode in {'OBJECT', 'EDIT_MESH'} 
			)

	def execute(self, context):
		mod = context.active_object.modifiers.get('Mirror')
		if mod is None:
			self.report({'WARNING'}, 'Object has no modifier named "Mirror"')
			return {'CANCELLED'}
		
		if context.mode == 'OBJECT':

			ob = context.active_object
			me = ob.data
			bm = bmesh.new()
			bm.from_mesh(me)
			
		elif context.mode == 'EDIT_MESH':

			ob = context.edit_object
			me = ob.data
			bm = bmesh.from_edit_mesh(me)

		use_axis = mod.use_axis
		use_flip = mod.use_bisect_flip_axis

		delete_verts = set()

		for i, (axis, flip) in enumerate(zip(use_axis, use_flip)):

			if not axis:
				continue
			
			if flip:
				delete_verts.update(
					set(v for v in bm.verts if v.co[i] > 0 + self.margin))
			else:
				delete_verts.update(
					set(v for v in bm.verts if v.co[i] < 0 - self.margin))

		for v in delete_verts:
			bm.verts.remove(v)
			# v.select=True

		if context.mode == 'OBJECT':
			bm.to_mesh(me)
		elif context.mode == 'EDIT_MESH':
			bmesh.update_edit_mesh(me)

		return {'FINISHED'}


def draw(self, context):
    self.layout.separator()
    self.layout.operator(MESH_OT_armored_delete_mirrored.bl_idname, text='Delete Mirrored Geo',)


classes = (
	MESH_OT_armored_delete_mirrored,
)

def register():
	for cls in classes:
		bpy.utils.register_class(cls)
		
	# bpy.types.VIEW3D_MT_edit_mesh_delete.append(draw)


def unregister():
	for cls in classes:
		bpy.utils.unregister_class(cls)
		
	# bpy.types.VIEW3D_MT_edit_mesh_delete.remove(draw)